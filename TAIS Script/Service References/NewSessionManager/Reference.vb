'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System.Data

Namespace NewSessionManager
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts")>  _
    Partial Public Class APIUnhandledServerFault
        Inherits APIWarningFault
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(APIUnhandledServerFault)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts")>  _
    Partial Public Class APIWarningFault
        Inherits APIFault
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(APISecurityFault)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(APIValidationFault)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(APICriticalFault)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(APIGeneralFault)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(APIWarningFault)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(APIUnhandledServerFault)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts")>  _
    Partial Public Class APIFault
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private errorCodeField As String
        
        Private errorTypeField As String
        
        Private messageField As String
        
        Private uniqueIDField As String
        
        Private stackTraceField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=0)>  _
        Public Property ErrorCode() As String
            Get
                Return Me.errorCodeField
            End Get
            Set
                Me.errorCodeField = value
                Me.RaisePropertyChanged("ErrorCode")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=1)>  _
        Public Property ErrorType() As String
            Get
                Return Me.errorTypeField
            End Get
            Set
                Me.errorTypeField = value
                Me.RaisePropertyChanged("ErrorType")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=2)>  _
        Public Property Message() As String
            Get
                Return Me.messageField
            End Get
            Set
                Me.messageField = value
                Me.RaisePropertyChanged("Message")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=3)>  _
        Public Property UniqueID() As String
            Get
                Return Me.uniqueIDField
            End Get
            Set
                Me.uniqueIDField = value
                Me.RaisePropertyChanged("UniqueID")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=4)>  _
        Public Property StackTrace() As String
            Get
                Return Me.stackTraceField
            End Get
            Set
                Me.stackTraceField = value
                Me.RaisePropertyChanged("StackTrace")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.navitaire.com/Ncl/Validation/ValidationResult")>  _
    Partial Public Class ValidationResult
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private annotationsField As System.Data.DataSet
        
        Private failedValidationDescriptionField As String
        
        Private keyField As String
        
        Private successfulField As Boolean
        
        Private successfulFieldSpecified As Boolean
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=0)>  _
        Public Property Annotations() As System.Data.DataSet
            Get
                Return Me.annotationsField
            End Get
            Set
                Me.annotationsField = value
                Me.RaisePropertyChanged("Annotations")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=1)>  _
        Public Property FailedValidationDescription() As String
            Get
                Return Me.failedValidationDescriptionField
            End Get
            Set
                Me.failedValidationDescriptionField = value
                Me.RaisePropertyChanged("FailedValidationDescription")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=2)>  _
        Public Property Key() As String
            Get
                Return Me.keyField
            End Get
            Set
                Me.keyField = value
                Me.RaisePropertyChanged("Key")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=3)>  _
        Public Property Successful() As Boolean
            Get
                Return Me.successfulField
            End Get
            Set
                Me.successfulField = value
                Me.RaisePropertyChanged("Successful")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Property SuccessfulSpecified() As Boolean
            Get
                Return Me.successfulFieldSpecified
            End Get
            Set
                Me.successfulFieldSpecified = value
                Me.RaisePropertyChanged("SuccessfulSpecified")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/DataContracts/Session")>  _
    Partial Public Class LogonRequestData
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private domainCodeField As String
        
        Private agentNameField As String
        
        Private passwordField As String
        
        Private locationCodeField As String
        
        Private roleCodeField As String
        
        Private terminalInfoField As String
        
        Private clientNameField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=0)>  _
        Public Property DomainCode() As String
            Get
                Return Me.domainCodeField
            End Get
            Set
                Me.domainCodeField = value
                Me.RaisePropertyChanged("DomainCode")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=1)>  _
        Public Property AgentName() As String
            Get
                Return Me.agentNameField
            End Get
            Set
                Me.agentNameField = value
                Me.RaisePropertyChanged("AgentName")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=2)>  _
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
                Me.RaisePropertyChanged("Password")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=3)>  _
        Public Property LocationCode() As String
            Get
                Return Me.locationCodeField
            End Get
            Set
                Me.locationCodeField = value
                Me.RaisePropertyChanged("LocationCode")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=4)>  _
        Public Property RoleCode() As String
            Get
                Return Me.roleCodeField
            End Get
            Set
                Me.roleCodeField = value
                Me.RaisePropertyChanged("RoleCode")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=5)>  _
        Public Property TerminalInfo() As String
            Get
                Return Me.terminalInfoField
            End Get
            Set
                Me.terminalInfoField = value
                Me.RaisePropertyChanged("TerminalInfo")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=6)>  _
        Public Property ClientName() As String
            Get
                Return Me.clientNameField
            End Get
            Set
                Me.clientNameField = value
                Me.RaisePropertyChanged("ClientName")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts")>  _
    Partial Public Class APISecurityFault
        Inherits APIFault
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts")>  _
    Partial Public Class APIValidationFault
        Inherits APIFault
        
        Private validationResultsField() As ValidationResult
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArrayAttribute(IsNullable:=true, Order:=0),  _
         System.Xml.Serialization.XmlArrayItemAttribute([Namespace]:="http://www.navitaire.com/Ncl/Validation/ValidationResult")>  _
        Public Property ValidationResults() As ValidationResult()
            Get
                Return Me.validationResultsField
            End Get
            Set
                Me.validationResultsField = value
                Me.RaisePropertyChanged("ValidationResults")
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts")>  _
    Partial Public Class APICriticalFault
        Inherits APIFault
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts")>  _
    Partial Public Class APIGeneralFault
        Inherits APIFault
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.ServiceContractAttribute([Namespace]:="http://schemas.navitaire.com/WebServices", ConfigurationName:="NewSessionManager.ISessionManager")>  _
    Public Interface ISessionManager
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePassword", ReplyAction:="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePasswordResponse"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIUnhandledServerFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePasswordAPIUnhandl"& _ 
            "edServerFaultFault", Name:="APIUnhandledServerFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePasswordAPIFaultFa"& _ 
            "ult", Name:="APIFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIGeneralFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePasswordAPIGeneral"& _ 
            "FaultFault", Name:="APIGeneralFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APICriticalFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePasswordAPICritica"& _ 
            "lFaultFault", Name:="APICriticalFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIWarningFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePasswordAPIWarning"& _ 
            "FaultFault", Name:="APIWarningFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIValidationFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePasswordAPIValidat"& _ 
            "ionFaultFault", Name:="APIValidationFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APISecurityFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePasswordAPISecurit"& _ 
            "yFaultFault", Name:="APISecurityFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults:=true),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(APIFault))>  _
        Function ChangePassword(ByVal request As NewSessionManager.ChangePasswordRequest) As NewSessionManager.ChangePasswordResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePassword", ReplyAction:="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePasswordResponse")>  _
        Function BeginChangePassword(ByVal request As NewSessionManager.ChangePasswordRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndChangePassword(ByVal result As System.IAsyncResult) As NewSessionManager.ChangePasswordResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://schemas.navitaire.com/WebServices/ISessionManager/Logon", ReplyAction:="http://schemas.navitaire.com/WebServices/ISessionManager/LogonResponse"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogonAPIFaultFault", Name:="APIFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIUnhandledServerFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogonAPIUnhandledServerF"& _ 
            "aultFault", Name:="APIUnhandledServerFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIValidationFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogonAPIValidationFaultF"& _ 
            "ault", Name:="APIValidationFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APICriticalFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogonAPICriticalFaultFau"& _ 
            "lt", Name:="APICriticalFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIWarningFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogonAPIWarningFaultFaul"& _ 
            "t", Name:="APIWarningFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APISecurityFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogonAPISecurityFaultFau"& _ 
            "lt", Name:="APISecurityFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIGeneralFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogonAPIGeneralFaultFaul"& _ 
            "t", Name:="APIGeneralFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults:=true),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(APIFault))>  _
        Function Logon(ByVal request As NewSessionManager.LogonRequest) As NewSessionManager.LogonResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://schemas.navitaire.com/WebServices/ISessionManager/Logon", ReplyAction:="http://schemas.navitaire.com/WebServices/ISessionManager/LogonResponse")>  _
        Function BeginLogon(ByVal request As NewSessionManager.LogonRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndLogon(ByVal result As System.IAsyncResult) As NewSessionManager.LogonResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://schemas.navitaire.com/WebServices/ISessionManager/Logout", ReplyAction:="http://schemas.navitaire.com/WebServices/ISessionManager/LogoutResponse"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIUnhandledServerFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogoutAPIUnhandledServer"& _ 
            "FaultFault", Name:="APIUnhandledServerFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogoutAPIFaultFault", Name:="APIFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIGeneralFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogoutAPIGeneralFaultFau"& _ 
            "lt", Name:="APIGeneralFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APICriticalFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogoutAPICriticalFaultFa"& _ 
            "ult", Name:="APICriticalFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIWarningFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogoutAPIWarningFaultFau"& _ 
            "lt", Name:="APIWarningFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIValidationFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogoutAPIValidationFault"& _ 
            "Fault", Name:="APIValidationFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APISecurityFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/LogoutAPISecurityFaultFa"& _ 
            "ult", Name:="APISecurityFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults:=true),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(APIFault))>  _
        Function Logout(ByVal request As NewSessionManager.LogoutRequest) As NewSessionManager.LogoutResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://schemas.navitaire.com/WebServices/ISessionManager/Logout", ReplyAction:="http://schemas.navitaire.com/WebServices/ISessionManager/LogoutResponse")>  _
        Function BeginLogout(ByVal request As NewSessionManager.LogoutRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndLogout(ByVal result As System.IAsyncResult) As NewSessionManager.LogoutResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSession", ReplyAction:="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSessionResponse"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIUnhandledServerFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSessionAPIUnhand"& _ 
            "ledServerFaultFault", Name:="APIUnhandledServerFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIValidationFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSessionAPIValida"& _ 
            "tionFaultFault", Name:="APIValidationFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APISecurityFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSessionAPISecuri"& _ 
            "tyFaultFault", Name:="APISecurityFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSessionAPIFaultF"& _ 
            "ault", Name:="APIFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APICriticalFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSessionAPICritic"& _ 
            "alFaultFault", Name:="APICriticalFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIWarningFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSessionAPIWarnin"& _ 
            "gFaultFault", Name:="APIWarningFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.FaultContractAttribute(GetType(NewSessionManager.APIGeneralFault), Action:="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSessionAPIGenera"& _ 
            "lFaultFault", Name:="APIGeneralFault", [Namespace]:="http://schemas.navitaire.com/WebServices/FaultContracts"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults:=true),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(APIFault))>  _
        Function TransferSession(ByVal request As NewSessionManager.TransferSessionRequest) As NewSessionManager.TransferSessionResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSession", ReplyAction:="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSessionResponse")>  _
        Function BeginTransferSession(ByVal request As NewSessionManager.TransferSessionRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndTransferSession(ByVal result As System.IAsyncResult) As NewSessionManager.TransferSessionResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://schemas.navitaire.com/WebServices/ISessionManager/KeepAlive", ReplyAction:="http://schemas.navitaire.com/WebServices/ISessionManager/KeepAliveResponse"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults:=true),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(APIFault))>  _
        Function KeepAlive(ByVal request As NewSessionManager.KeepAliveRequest) As NewSessionManager.KeepAliveResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://schemas.navitaire.com/WebServices/ISessionManager/KeepAlive", ReplyAction:="http://schemas.navitaire.com/WebServices/ISessionManager/KeepAliveResponse")>  _
        Function BeginKeepAlive(ByVal request As NewSessionManager.KeepAliveRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndKeepAlive(ByVal result As System.IAsyncResult) As NewSessionManager.KeepAliveResponse
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="ChangePasswordRequest", WrapperNamespace:="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped:=true)>  _
    Partial Public Class ChangePasswordRequest
        
        <System.ServiceModel.MessageHeaderAttribute([Namespace]:="http://schemas.navitaire.com/WebServices")>  _
        Public ContractVersion As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order:=0),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public logonRequestData As NewSessionManager.LogonRequestData
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order:=1),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public newPassword As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal ContractVersion As Integer, ByVal logonRequestData As NewSessionManager.LogonRequestData, ByVal newPassword As String)
            MyBase.New
            Me.ContractVersion = ContractVersion
            Me.logonRequestData = logonRequestData
            Me.newPassword = newPassword
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(IsWrapped:=false)>  _
    Partial Public Class ChangePasswordResponse
        
        Public Sub New()
            MyBase.New
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="LogonRequest", WrapperNamespace:="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped:=true)>  _
    Partial Public Class LogonRequest
        
        <System.ServiceModel.MessageHeaderAttribute([Namespace]:="http://schemas.navitaire.com/WebServices")>  _
        Public ContractVersion As Integer
        
        <System.ServiceModel.MessageHeaderAttribute([Namespace]:="http://schemas.navitaire.com/WebServices")>  _
        Public EnableExceptionStackTrace As Boolean
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order:=0),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public logonRequestData As NewSessionManager.LogonRequestData
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal ContractVersion As Integer, ByVal EnableExceptionStackTrace As Boolean, ByVal logonRequestData As NewSessionManager.LogonRequestData)
            MyBase.New
            Me.ContractVersion = ContractVersion
            Me.EnableExceptionStackTrace = EnableExceptionStackTrace
            Me.logonRequestData = logonRequestData
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="LogonResponse", WrapperNamespace:="http://schemas.navitaire.com/WebServices", IsWrapped:=true)>  _
    Partial Public Class LogonResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="http://schemas.navitaire.com/WebServices", Order:=0),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Signature As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal Signature As String)
            MyBase.New
            Me.Signature = Signature
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="LogoutRequest", WrapperNamespace:="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped:=true)>  _
    Partial Public Class LogoutRequest
        
        <System.ServiceModel.MessageHeaderAttribute([Namespace]:="http://schemas.navitaire.com/WebServices")>  _
        Public ContractVersion As Integer
        
        <System.ServiceModel.MessageHeaderAttribute([Namespace]:="http://schemas.navitaire.com/WebServices")>  _
        Public EnableExceptionStackTrace As Boolean
        
        <System.ServiceModel.MessageHeaderAttribute([Namespace]:="http://schemas.navitaire.com/WebServices"),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public MessageContractVersion As String
        
        <System.ServiceModel.MessageHeaderAttribute([Namespace]:="http://schemas.navitaire.com/WebServices"),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Signature As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal ContractVersion As Integer, ByVal EnableExceptionStackTrace As Boolean, ByVal MessageContractVersion As String, ByVal Signature As String)
            MyBase.New
            Me.ContractVersion = ContractVersion
            Me.EnableExceptionStackTrace = EnableExceptionStackTrace
            Me.MessageContractVersion = MessageContractVersion
            Me.Signature = Signature
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(IsWrapped:=false)>  _
    Partial Public Class LogoutResponse
        
        Public Sub New()
            MyBase.New
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/DataContracts/Session")>  _
    Partial Public Class TokenRequest
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private tokenField As String
        
        Private terminalInfoField As String
        
        Private channelTypeField As ChannelType
        
        Private channelTypeFieldSpecified As Boolean
        
        Private systemTypeField As SystemType
        
        Private systemTypeFieldSpecified As Boolean
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=0)>  _
        Public Property Token() As String
            Get
                Return Me.tokenField
            End Get
            Set
                Me.tokenField = value
                Me.RaisePropertyChanged("Token")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=1)>  _
        Public Property TerminalInfo() As String
            Get
                Return Me.terminalInfoField
            End Get
            Set
                Me.terminalInfoField = value
                Me.RaisePropertyChanged("TerminalInfo")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=2)>  _
        Public Property ChannelType() As ChannelType
            Get
                Return Me.channelTypeField
            End Get
            Set
                Me.channelTypeField = value
                Me.RaisePropertyChanged("ChannelType")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Property ChannelTypeSpecified() As Boolean
            Get
                Return Me.channelTypeFieldSpecified
            End Get
            Set
                Me.channelTypeFieldSpecified = value
                Me.RaisePropertyChanged("ChannelTypeSpecified")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=3)>  _
        Public Property SystemType() As SystemType
            Get
                Return Me.systemTypeField
            End Get
            Set
                Me.systemTypeField = value
                Me.RaisePropertyChanged("SystemType")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Property SystemTypeSpecified() As Boolean
            Get
                Return Me.systemTypeFieldSpecified
            End Get
            Set
                Me.systemTypeFieldSpecified = value
                Me.RaisePropertyChanged("SystemTypeSpecified")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/DataContracts/Common/Enumerations")>  _
    Public Enum ChannelType
        
        '''<remarks/>
        [Default]
        
        '''<remarks/>
        Direct
        
        '''<remarks/>
        Web
        
        '''<remarks/>
        GDS
        
        '''<remarks/>
        API
        
        '''<remarks/>
        Unmapped
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/DataContracts/Common/Enumerations")>  _
    Public Enum SystemType
        
        '''<remarks/>
        [Default]
        
        '''<remarks/>
        WinRez
        
        '''<remarks/>
        FareManager
        
        '''<remarks/>
        ScheduleManager
        
        '''<remarks/>
        WinManager
        
        '''<remarks/>
        ConsoleRez
        
        '''<remarks/>
        WebRez
        
        '''<remarks/>
        WebServicesAPI
        
        '''<remarks/>
        WebServicesESC
        
        '''<remarks/>
        InternalService
        
        '''<remarks/>
        WebReporting
        
        '''<remarks/>
        TaxAndFeeManager
        
        '''<remarks/>
        DCS
        
        '''<remarks/>
        Unmapped
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/DataContracts/Session")>  _
    Partial Public Class TransferSessionResponseData
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private signatureField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Order:=0)>  _
        Public Property Signature() As String
            Get
                Return Me.signatureField
            End Get
            Set
                Me.signatureField = value
                Me.RaisePropertyChanged("Signature")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="TransferSessionRequest", WrapperNamespace:="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped:=true)>  _
    Partial Public Class TransferSessionRequest
        
        <System.ServiceModel.MessageHeaderAttribute([Namespace]:="http://schemas.navitaire.com/WebServices")>  _
        Public ContractVersion As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order:=0),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public tokenRequest As NewSessionManager.TokenRequest
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal ContractVersion As Integer, ByVal tokenRequest As NewSessionManager.TokenRequest)
            MyBase.New
            Me.ContractVersion = ContractVersion
            Me.tokenRequest = tokenRequest
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="TransferSessionResponse", WrapperNamespace:="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped:=true)>  _
    Partial Public Class TransferSessionResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order:=0),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public TransferSessionResponseData As NewSessionManager.TransferSessionResponseData
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal TransferSessionResponseData As NewSessionManager.TransferSessionResponseData)
            MyBase.New
            Me.TransferSessionResponseData = TransferSessionResponseData
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="KeepAliveRequest", WrapperNamespace:="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped:=true)>  _
    Partial Public Class KeepAliveRequest
        
        <System.ServiceModel.MessageHeaderAttribute([Namespace]:="http://schemas.navitaire.com/WebServices")>  _
        Public ContractVersion As Integer
        
        <System.ServiceModel.MessageHeaderAttribute([Namespace]:="http://schemas.navitaire.com/WebServices")>  _
        Public EnableExceptionStackTrace As Boolean
        
        <System.ServiceModel.MessageHeaderAttribute([Namespace]:="http://schemas.navitaire.com/WebServices"),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public MessageContractVersion As String
        
        <System.ServiceModel.MessageHeaderAttribute([Namespace]:="http://schemas.navitaire.com/WebServices"),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Signature As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal ContractVersion As Integer, ByVal EnableExceptionStackTrace As Boolean, ByVal MessageContractVersion As String, ByVal Signature As String)
            MyBase.New
            Me.ContractVersion = ContractVersion
            Me.EnableExceptionStackTrace = EnableExceptionStackTrace
            Me.MessageContractVersion = MessageContractVersion
            Me.Signature = Signature
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(IsWrapped:=false)>  _
    Partial Public Class KeepAliveResponse
        
        Public Sub New()
            MyBase.New
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface ISessionManagerChannel
        Inherits NewSessionManager.ISessionManager, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class ChangePasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As NewSessionManager.ChangePasswordResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),NewSessionManager.ChangePasswordResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class LogonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As NewSessionManager.LogonResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),NewSessionManager.LogonResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class LogoutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As NewSessionManager.LogoutResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),NewSessionManager.LogoutResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class TransferSessionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As NewSessionManager.TransferSessionResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),NewSessionManager.TransferSessionResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class KeepAliveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As NewSessionManager.KeepAliveResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),NewSessionManager.KeepAliveResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class SessionManagerClient
        Inherits System.ServiceModel.ClientBase(Of NewSessionManager.ISessionManager)
        Implements NewSessionManager.ISessionManager
        
        Private onBeginChangePasswordDelegate As BeginOperationDelegate
        
        Private onEndChangePasswordDelegate As EndOperationDelegate
        
        Private onChangePasswordCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginLogonDelegate As BeginOperationDelegate
        
        Private onEndLogonDelegate As EndOperationDelegate
        
        Private onLogonCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginLogoutDelegate As BeginOperationDelegate
        
        Private onEndLogoutDelegate As EndOperationDelegate
        
        Private onLogoutCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginTransferSessionDelegate As BeginOperationDelegate
        
        Private onEndTransferSessionDelegate As EndOperationDelegate
        
        Private onTransferSessionCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginKeepAliveDelegate As BeginOperationDelegate
        
        Private onEndKeepAliveDelegate As EndOperationDelegate
        
        Private onKeepAliveCompletedDelegate As System.Threading.SendOrPostCallback
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String)
            MyBase.New(endpointConfigurationName)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(binding, remoteAddress)
        End Sub
        
        Public Event ChangePasswordCompleted As System.EventHandler(Of ChangePasswordCompletedEventArgs)
        
        Public Event LogonCompleted As System.EventHandler(Of LogonCompletedEventArgs)
        
        Public Event LogoutCompleted As System.EventHandler(Of LogoutCompletedEventArgs)
        
        Public Event TransferSessionCompleted As System.EventHandler(Of TransferSessionCompletedEventArgs)
        
        Public Event KeepAliveCompleted As System.EventHandler(Of KeepAliveCompletedEventArgs)
        
        Public Function ChangePassword(ByVal request As NewSessionManager.ChangePasswordRequest) As NewSessionManager.ChangePasswordResponse Implements NewSessionManager.ISessionManager.ChangePassword
            Return MyBase.Channel.ChangePassword(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginChangePassword(ByVal request As NewSessionManager.ChangePasswordRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements NewSessionManager.ISessionManager.BeginChangePassword
            Return MyBase.Channel.BeginChangePassword(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndChangePassword(ByVal result As System.IAsyncResult) As NewSessionManager.ChangePasswordResponse Implements NewSessionManager.ISessionManager.EndChangePassword
            Return MyBase.Channel.EndChangePassword(result)
        End Function
        
        Private Function OnBeginChangePassword(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As NewSessionManager.ChangePasswordRequest = CType(inValues(0),NewSessionManager.ChangePasswordRequest)
            Return Me.BeginChangePassword(request, callback, asyncState)
        End Function
        
        Private Function OnEndChangePassword(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As NewSessionManager.ChangePasswordResponse = Me.EndChangePassword(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnChangePasswordCompleted(ByVal state As Object)
            If (Not (Me.ChangePasswordCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent ChangePasswordCompleted(Me, New ChangePasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub ChangePasswordAsync(ByVal request As NewSessionManager.ChangePasswordRequest)
            Me.ChangePasswordAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub ChangePasswordAsync(ByVal request As NewSessionManager.ChangePasswordRequest, ByVal userState As Object)
            If (Me.onBeginChangePasswordDelegate Is Nothing) Then
                Me.onBeginChangePasswordDelegate = AddressOf Me.OnBeginChangePassword
            End If
            If (Me.onEndChangePasswordDelegate Is Nothing) Then
                Me.onEndChangePasswordDelegate = AddressOf Me.OnEndChangePassword
            End If
            If (Me.onChangePasswordCompletedDelegate Is Nothing) Then
                Me.onChangePasswordCompletedDelegate = AddressOf Me.OnChangePasswordCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginChangePasswordDelegate, New Object() {request}, Me.onEndChangePasswordDelegate, Me.onChangePasswordCompletedDelegate, userState)
        End Sub
        
        Public Function Logon(ByVal request As NewSessionManager.LogonRequest) As NewSessionManager.LogonResponse Implements NewSessionManager.ISessionManager.Logon
            Return MyBase.Channel.Logon(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginLogon(ByVal request As NewSessionManager.LogonRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements NewSessionManager.ISessionManager.BeginLogon
            Return MyBase.Channel.BeginLogon(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndLogon(ByVal result As System.IAsyncResult) As NewSessionManager.LogonResponse Implements NewSessionManager.ISessionManager.EndLogon
            Return MyBase.Channel.EndLogon(result)
        End Function
        
        Private Function OnBeginLogon(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As NewSessionManager.LogonRequest = CType(inValues(0),NewSessionManager.LogonRequest)
            Return Me.BeginLogon(request, callback, asyncState)
        End Function
        
        Private Function OnEndLogon(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As NewSessionManager.LogonResponse = Me.EndLogon(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnLogonCompleted(ByVal state As Object)
            If (Not (Me.LogonCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent LogonCompleted(Me, New LogonCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub LogonAsync(ByVal request As NewSessionManager.LogonRequest)
            Me.LogonAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub LogonAsync(ByVal request As NewSessionManager.LogonRequest, ByVal userState As Object)
            If (Me.onBeginLogonDelegate Is Nothing) Then
                Me.onBeginLogonDelegate = AddressOf Me.OnBeginLogon
            End If
            If (Me.onEndLogonDelegate Is Nothing) Then
                Me.onEndLogonDelegate = AddressOf Me.OnEndLogon
            End If
            If (Me.onLogonCompletedDelegate Is Nothing) Then
                Me.onLogonCompletedDelegate = AddressOf Me.OnLogonCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginLogonDelegate, New Object() {request}, Me.onEndLogonDelegate, Me.onLogonCompletedDelegate, userState)
        End Sub
        
        Public Function Logout(ByVal request As NewSessionManager.LogoutRequest) As NewSessionManager.LogoutResponse Implements NewSessionManager.ISessionManager.Logout
            Return MyBase.Channel.Logout(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginLogout(ByVal request As NewSessionManager.LogoutRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements NewSessionManager.ISessionManager.BeginLogout
            Return MyBase.Channel.BeginLogout(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndLogout(ByVal result As System.IAsyncResult) As NewSessionManager.LogoutResponse Implements NewSessionManager.ISessionManager.EndLogout
            Return MyBase.Channel.EndLogout(result)
        End Function
        
        Private Function OnBeginLogout(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As NewSessionManager.LogoutRequest = CType(inValues(0),NewSessionManager.LogoutRequest)
            Return Me.BeginLogout(request, callback, asyncState)
        End Function
        
        Private Function OnEndLogout(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As NewSessionManager.LogoutResponse = Me.EndLogout(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnLogoutCompleted(ByVal state As Object)
            If (Not (Me.LogoutCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent LogoutCompleted(Me, New LogoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub LogoutAsync(ByVal request As NewSessionManager.LogoutRequest)
            Me.LogoutAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub LogoutAsync(ByVal request As NewSessionManager.LogoutRequest, ByVal userState As Object)
            If (Me.onBeginLogoutDelegate Is Nothing) Then
                Me.onBeginLogoutDelegate = AddressOf Me.OnBeginLogout
            End If
            If (Me.onEndLogoutDelegate Is Nothing) Then
                Me.onEndLogoutDelegate = AddressOf Me.OnEndLogout
            End If
            If (Me.onLogoutCompletedDelegate Is Nothing) Then
                Me.onLogoutCompletedDelegate = AddressOf Me.OnLogoutCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginLogoutDelegate, New Object() {request}, Me.onEndLogoutDelegate, Me.onLogoutCompletedDelegate, userState)
        End Sub
        
        Public Function TransferSession(ByVal request As NewSessionManager.TransferSessionRequest) As NewSessionManager.TransferSessionResponse Implements NewSessionManager.ISessionManager.TransferSession
            Return MyBase.Channel.TransferSession(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginTransferSession(ByVal request As NewSessionManager.TransferSessionRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements NewSessionManager.ISessionManager.BeginTransferSession
            Return MyBase.Channel.BeginTransferSession(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndTransferSession(ByVal result As System.IAsyncResult) As NewSessionManager.TransferSessionResponse Implements NewSessionManager.ISessionManager.EndTransferSession
            Return MyBase.Channel.EndTransferSession(result)
        End Function
        
        Private Function OnBeginTransferSession(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As NewSessionManager.TransferSessionRequest = CType(inValues(0),NewSessionManager.TransferSessionRequest)
            Return Me.BeginTransferSession(request, callback, asyncState)
        End Function
        
        Private Function OnEndTransferSession(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As NewSessionManager.TransferSessionResponse = Me.EndTransferSession(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnTransferSessionCompleted(ByVal state As Object)
            If (Not (Me.TransferSessionCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent TransferSessionCompleted(Me, New TransferSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub TransferSessionAsync(ByVal request As NewSessionManager.TransferSessionRequest)
            Me.TransferSessionAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub TransferSessionAsync(ByVal request As NewSessionManager.TransferSessionRequest, ByVal userState As Object)
            If (Me.onBeginTransferSessionDelegate Is Nothing) Then
                Me.onBeginTransferSessionDelegate = AddressOf Me.OnBeginTransferSession
            End If
            If (Me.onEndTransferSessionDelegate Is Nothing) Then
                Me.onEndTransferSessionDelegate = AddressOf Me.OnEndTransferSession
            End If
            If (Me.onTransferSessionCompletedDelegate Is Nothing) Then
                Me.onTransferSessionCompletedDelegate = AddressOf Me.OnTransferSessionCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginTransferSessionDelegate, New Object() {request}, Me.onEndTransferSessionDelegate, Me.onTransferSessionCompletedDelegate, userState)
        End Sub
        
        Public Function KeepAlive(ByVal request As NewSessionManager.KeepAliveRequest) As NewSessionManager.KeepAliveResponse Implements NewSessionManager.ISessionManager.KeepAlive
            Return MyBase.Channel.KeepAlive(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginKeepAlive(ByVal request As NewSessionManager.KeepAliveRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements NewSessionManager.ISessionManager.BeginKeepAlive
            Return MyBase.Channel.BeginKeepAlive(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndKeepAlive(ByVal result As System.IAsyncResult) As NewSessionManager.KeepAliveResponse Implements NewSessionManager.ISessionManager.EndKeepAlive
            Return MyBase.Channel.EndKeepAlive(result)
        End Function
        
        Private Function OnBeginKeepAlive(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As NewSessionManager.KeepAliveRequest = CType(inValues(0),NewSessionManager.KeepAliveRequest)
            Return Me.BeginKeepAlive(request, callback, asyncState)
        End Function
        
        Private Function OnEndKeepAlive(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As NewSessionManager.KeepAliveResponse = Me.EndKeepAlive(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnKeepAliveCompleted(ByVal state As Object)
            If (Not (Me.KeepAliveCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent KeepAliveCompleted(Me, New KeepAliveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub KeepAliveAsync(ByVal request As NewSessionManager.KeepAliveRequest)
            Me.KeepAliveAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub KeepAliveAsync(ByVal request As NewSessionManager.KeepAliveRequest, ByVal userState As Object)
            If (Me.onBeginKeepAliveDelegate Is Nothing) Then
                Me.onBeginKeepAliveDelegate = AddressOf Me.OnBeginKeepAlive
            End If
            If (Me.onEndKeepAliveDelegate Is Nothing) Then
                Me.onEndKeepAliveDelegate = AddressOf Me.OnEndKeepAlive
            End If
            If (Me.onKeepAliveCompletedDelegate Is Nothing) Then
                Me.onKeepAliveCompletedDelegate = AddressOf Me.OnKeepAliveCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginKeepAliveDelegate, New Object() {request}, Me.onEndKeepAliveDelegate, Me.onKeepAliveCompletedDelegate, userState)
        End Sub
    End Class
End Namespace
